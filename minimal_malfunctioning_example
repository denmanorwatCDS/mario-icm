import pickle
from ICM.ICM_buffer import ICMBuffer
from Config import ICM_CFG, ENV_CFG
from Config.all_hyperparams_dict import HYPERPARAMS
from ICM.ICM import ICM
from torch import optim, nn
from torch.functional import F
from PIL import Image
import torch
import wandb
from simple_net import SimplePredictor
from ICM.ICM import ICM


model = ICM(ENV_CFG.ACTION_SPACE_SIZE, temporal_channels = ENV_CFG.TEMPORAL_CHANNELS, 
    hidden_layer_neurons=ICM_CFG.HIDDEN_LAYERS, eta = ICM_CFG.ETA, feature_map_qty=ICM_CFG.FMAP_QTY
    ).to(ENV_CFG.DEVICE)
icm_optimizer = optim.Adam(model.parameters(), lr=ICM_CFG.LR)
icm_buffer = ICMBuffer(ICM_CFG.BUFFER_SIZE, ICM_CFG.BUFFER_SIZE)

run = wandb.init(project = "ICM_debug", config = HYPERPARAMS)

path_to_file = "/home/dvasilev/mario_icm/debug/train_set/pickled_train_list.pkl"
with open(path_to_file, "rb") as pickled_buffer:
    example_array = pickle.load(pickled_buffer)

def train(model, optimizer, example_array):
    observations = torch.cat([example_array[i][0] for i in range(ICM_CFG.BUFFER_SIZE)], dim = 0)
    actions = torch.cat([example_array[i][1] for i in range(ICM_CFG.BUFFER_SIZE)], dim = 0)
    next_observations = torch.cat([example_array[i][2] for i in range(ICM_CFG.BUFFER_SIZE)], dim = 0)
    predicted_actions, _, _ = model(observations, actions, next_observations)

    CE_loss = nn.CrossEntropyLoss()
    action_one_hot = F.one_hot(actions.flatten(), num_classes = ENV_CFG.ACTION_SPACE_SIZE)
    action_prediction_loss =\
        CE_loss(predicted_actions, action_one_hot.to(torch.float32))
    wandb.log({"Action prediction loss": action_prediction_loss.item()})
    optimizer.zero_grad()
    action_prediction_loss.backward()
    optimizer.step()

def save_pictures(triplet, id_of_pic):
    prev_picture, action, cur_picture = triplet
    prev_picture = (255*prev_picture).byte().squeeze().cpu().numpy()
    for t in range(ENV_CFG.TEMPORAL_CHANNELS):
        im = Image.fromarray(prev_picture[t, :, :], "L")
        im.save("/home/dvasilev/mario_icm/debug/train_set/pictures/prev_picture"+id_of_pic+"t="+str(t)+"_"+".png")
    action = action.squeeze().cpu().numpy()
    cur_picture = (255*cur_picture).byte().squeeze().cpu().numpy()
    for t in range(ENV_CFG.TEMPORAL_CHANNELS):
        im = Image.fromarray(cur_picture[t, :, :], "L")
        im.save("/home/dvasilev/mario_icm/debug/train_set/pictures/cur_picture"+id_of_pic+"t="+str(t)+"_"+".png")
    print("Executed action: {}".format(ENV_CFG.ACTION_NAMES[action]))

save_pictures(example_array[0], "0")
save_pictures(example_array[1], "1")
save_pictures(example_array[2], "2")
save_pictures(example_array[3], "3")
save_pictures(example_array[4], "4")
save_pictures(example_array[5], "5")
save_pictures(example_array[6], "6")
save_pictures(example_array[7], "7")
save_pictures(example_array[8], "8")
save_pictures(example_array[9], "9")

while True:
    train(model, icm_optimizer, example_array)